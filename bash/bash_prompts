# Some really useful things for bash prompts

DATE_CMD="/usr/bin/date"

function get_git_origin {
  git remote -v 2>&1 | grep origin | grep fetch | awk '{print $2}'
}

function parse_git_branch {
  get_git_origin | egrep -vq '^$' # check for empty line
  IN_GIT=${PIPESTATUS[1]}
  if [ $IN_GIT -eq 0 ]; then
    BRANCH=$(git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    printf "[$BRANCH]"
  fi
}


# Must "brew install coreutils" to get this to work
function timer_now {
  "$DATE_CMD" +%s%N
}

function timer_start {
    timer_start=${timer_start:-$(timer_now)}
}

function long_running_process_bell() {
  n=$1
  i=0
  while [ $i -lt $n ]; do
    echo -e "\a"
    sleep 0.5
    i=$((($i + 1)))
  done
}

function timer_stop {
    local delta_us=$((($(timer_now) - $timer_start) / 1000))
    local us=$((delta_us % 1000))
    local ms=$(((delta_us / 1000) % 1000))
    local s=$(((delta_us / 1000000) % 60))
    local m=$(((delta_us / 60000000) % 60))
    local h=$((delta_us / 3600000000))
    # Goal: always show around 3 digits of accuracy
    if ((h > 0)); then timer_show=${h}h${m}m
    elif ((m > 0)); then timer_show=${m}m${s}s
    elif ((s >= 10)); then timer_show=${s}.$((ms / 100))s
    elif ((s > 0)); then timer_show=${s}.$(printf %03d $ms)s
    elif ((ms >= 100)); then timer_show=${ms}ms
    elif ((ms > 0)); then timer_show=${ms}.$((us / 100))ms
    else timer_show=${us}us
    fi

    # If the process took a long time then give us an audible bell
    if ((m >= 1));  then long_running_process_bell 5
    elif ((s >= 15)); then long_running_process_bell 2
    fi
    unset timer_start
}

set_prompt () {
    Last_Command=$? # Must come first!
    Blue='\[\e[01;34m\]'
    Cyan="\[\033[0;36m\]"
    White='\[\e[01;37m\]'
    Red='\[\e[01;31m\]'
    Green='\[\e[01;32m\]'
    Yellow="\[\033[1;33m\]"
    Reset='\[\e[00m\]'
    FancyX='\342\234\227'
    Checkmark='\342\234\223'


    # Add a bright white exit status for the last command
    PS1="$White\$? "
    # If it was successful, print a green check mark. Otherwise, print
    # a red X.
    if [[ $Last_Command == 0 ]]; then
        PS1+="$Green$Checkmark "
    else
        PS1+="$Red$FancyX "
    fi

    # Add the ellapsed time and current date
    timer_stop
    PS1+="$Cyan($timer_show) \t "

    # Print the working directory and git branch if in a git repo
    PS1+="$Blue\\w $Yellow\$(parse_git_branch)"

    # If root, just print the host in red. Otherwise, print the current user
    # and host in another color
    if [[ $EUID == 0 ]]; then
        PS1+="\\n$Red\\u$Green@\\h "
    else
        PS1+="\\n$Cyan\\u"
    fi

    PS1+="$Blue \\\$ $Reset"

}

if [ "$IN_NIX_SHELL" = "" ]; then
  if [ -f "$DATE_CMD"  ]; then
    trap 'timer_start' DEBUG
    PROMPT_COMMAND='set_prompt'
  else
    echo "*** Please 'brew install coreutils' to get the good prompt ***"
  fi
fi
